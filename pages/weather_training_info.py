import streamlit as st
import matplotlib.pyplot as plt
import seaborn as sns
import torch
import pandas as pd
import numpy as np
import json
import os
from sklearn.metrics import confusion_matrix, f1_score, ConfusionMatrixDisplay

st.title("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ –º–æ–¥–µ–ª–∏")

# --- –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º —Å –ª–æ–≥–∞–º–∏ (–º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ train_weather.py) ---
log_path = "models/train_log.json"
cm_path = "models/confusion.json"

# --- –ö—Ä–∏–≤–∞—è –æ–±—É—á–µ–Ω–∏—è ---
if os.path.exists(log_path):
    with open(log_path, "r") as f:
        log = json.load(f)

    losses = log.get("valid_losses", [])
    timesec = log.get("training_time", None)

    st.subheader("üìâ –ö—Ä–∏–≤–∞—è –æ–±—É—á–µ–Ω–∏—è (Loss –ø–æ —ç–ø–æ—Ö–∞–º)")
    fig, ax = plt.subplots()
    ax.plot(range(1, len(losses)+1), losses, marker="o")
    ax.set_xlabel("–≠–ø–æ—Ö–∞")
    ax.set_ylabel("Loss")
    st.pyplot(fig)

    if timesec:
        minutes = round(timesec / 60, 2)
        st.info(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è: {minutes} –º–∏–Ω—É—Ç")
else:
    st.warning("–õ–æ–≥ –æ–±—É—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±–Ω–æ–≤–∏—Ç–µ train_weather.py –¥–ª—è –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤.")

# --- –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ ---
st.subheader("üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ –≤ –¥–∞—Ç–∞—Å–µ—Ç–µ")
class_counts = {
    'dew': 1051, 'fogsmog': 934, 'frost': 1067, 'glaze': 1075, 'hail': 983, 'lightning': 1074,
    'rain': 1000, 'rainbow': 980, 'rime': 1057, 'sandstorm': 1026, 'snow': 982
}
df_counts = pd.DataFrame.from_dict(class_counts, orient='index', columns=["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"])
st.bar_chart(df_counts)

# --- Confusion matrix ---
if os.path.exists(cm_path):
    with open(cm_path, "r") as f:
        cm_data = json.load(f)
        y_true = cm_data["true"]
        y_pred = cm_data["pred"]

    f1 = f1_score(y_true, y_pred, average='weighted')
    st.subheader("üéØ Confusion Matrix –∏ F1-score")
    st.write(f"**F1-score**: {f1:.3f}")

    cm = confusion_matrix(y_true, y_pred)
    fig2, ax2 = plt.subplots(figsize=(8, 6))
    sns.heatmap(cm, annot=True, fmt="d", cmap="Blues", xticklabels=class_counts.keys(), yticklabels=class_counts.keys())
    st.pyplot(fig2)
else:
    st.warning("–§–∞–π–ª —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ train_weather.py.")
